name: KFC workflow
on: 
  push:
    # main에 대해서만 실행하도록 설정
    branches: [ cd ]
    
# 실행
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 현재 브랜치 코드 체크아웃
      - uses: actions/checkout@v3

      # Node 설치 (프론트)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      # 프론트엔드 의존성 설치 및 빌드
      # - name: Build Frontend
      #   working-directory: ./frontend
      #   run: |
      #     echo "VITE_KAKAOMAP_API_KEY=${{ secrets.VITE_KAKAOMAP_API_KEY }}" > .env
      #     npm install
      #     npm run build

      # jdk 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        # 매개변수 설정
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # Docker buildx 설정    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
       
        # 도커 허브 로그인
      - name: docker hub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      # 각 API별 application-secret.properties 파일 생성
      - name: Create application-secret.properties for each API
        run: |
          # stadium_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/stadium_api/src/main/resources/application-secret.properties

          # reservation_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/reservation_api/src/main/resources/application-secret.properties
          echo "${{ secrets.ALARM_API_URL }}" >> backend/reservation_api/src/main/resources/application-secret.properties

          # kakaopay_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/kakaopay_api/src/main/resources/application-secret.properties
          echo "${{ secrets.KAKAO_ADMIN_KEY }}" >> backend/kakaopay_api/src/main/resources/application-secret.properties

          # security_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/security/security_api/src/main/resources/application-secret.properties
          echo "${{ secrets.SECURITY_APPLICATION_SECRET_PROPERTIES }}" >> backend/reservation_api/src/main/resources/application-secret.properties

          # login_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/security/login_api/src/main/resources/application-secret.properties
          echo "${{ secrets.ALARM_API_URL }}" >> backend/reservation_api/src/main/resources/application-secret.properties
          echo "${{ secrets.LOGIN_APPLICATION_SECRET_PROPERTIES }}" >> backend/reservation_api/src/main/resources/application-secret.properties

          # alarm_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/alarm_api/src/main/resources/application-secret.properties

          # club_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/club_api/src/main/resources/application-secret.properties
          echo "${{ secrets.ALARM_API_URL }}" >> backend/club_api/src/main/resources/application-secret.properties

          # recruit_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/recruit_api/src/main/resources/application-secret.properties
          echo "${{ secrets.ALARM_API_URL }}" >> backend/recruit_api/src/main/resources/application-secret.properties

          # weather_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/weather_api/src/main/resources/application-secret.properties
          echo "${{ secrets.WEATHER_APPLICATION_SECRET_PROPERTIES }}" >> backend/weather_api/src/main/resources/application-secret.properties

          # board_api
          echo "${{ secrets.APPLICATION_SECRET_PROPERTIES_COMMON }}" > backend/security/board_api/src/main/resources/application-secret.properties
          echo "${{ secrets.ALARM_SERVICE_API_KEY }}" >> backend/security/board_api/src/main/resources/application-secret.properties
          echo "${{ secrets.BOARD_APPLICATION_SECRET_PROPERTIES }}" >> backend/security/board_api/src/main/resources/application-secret.properties
          
          
      # 프론트엔드 이미지 빌드 및 푸시
      - name: Build and Push Frontend Image
        working-directory: ${{ github.workspace }}/frontend
        run: |
          echo "VITE_KAKAOMAP_API_KEY=${{ secrets.VITE_KAKAOMAP_API_KEY }}" > .env
          docker build -f ./Dockerfile -t ${{ secrets.USERNAME }}/nginx .
          docker push ${{ secrets.USERNAME }}/nginx

      # 하위 폴더 전체 권한 부여
      - name: Set read permissions for all APIs
        run: |
          chmod -R a+r ./backend

      # 백엔 Gradle 빌드
      - name: Gradle bootJar for each API
        run: |
         pushd backend/alarm_api && chmod +x ./gradlew && ./gradlew build -x test && popd
         pushd backend/club_api && chmod +x ./gradlew && ./gradlew build -x test && popd
         pushd backend/kakaopay_api && chmod +x ./gradlew && ./gradlew build -x test && popd
         pushd backend/recruit_api && chmod +x ./gradlew && ./gradlew build -x test && popd
         pushd backend/reservation_api && chmod +x ./gradlew && ./gradlew build -x test && popd
         pushd backend/stadium_api && chmod +x ./gradlew && ./gradlew build -x test && popd
         pushd backend/weather_api && chmod +x ./gradlew && ./gradlew build -x test && popd
         pushd backend/security && chmod +x ./gradlew && ./gradlew :security_api:build -x test && ./gradlew :board_api:build -x test && ./gradlew :login_api:build -x test && popd
          

     # 백엔드 이미지 빌드 및 푸쉬
      - name: Build and Push API Images
        run: |
          cd ${{ github.workspace }}  # 루트 경로로 복귀

          docker build -t ${{ secrets.USERNAME }}/alarm_api ./backend/alarm_api
          docker push ${{ secrets.USERNAME }}/alarm_api

          docker build -t ${{ secrets.USERNAME }}/club_api ./backend/club_api
          docker push ${{ secrets.USERNAME }}/club_api

          docker build -t ${{ secrets.USERNAME }}/kakaopay_api ./backend/kakaopay_api
          docker push ${{ secrets.USERNAME }}/kakaopay_api

          docker build -t ${{ secrets.USERNAME }}/recruit_api ./backend/recruit_api
          docker push ${{ secrets.USERNAME }}/recruit_api

          docker build -t ${{ secrets.USERNAME }}/reservation_api ./backend/reservation_api
          docker push ${{ secrets.USERNAME }}/reservation_api

          docker build -t ${{ secrets.USERNAME }}/security_api ./backend/security/security_api
          docker push ${{ secrets.USERNAME }}/security_api

          docker build -t ${{ secrets.USERNAME }}/login_api ./backend/security/login_api
          docker push ${{ secrets.USERNAME }}/login_api

          docker build -t ${{ secrets.USERNAME }}/board_api ./backend/security/board_api
          docker push ${{ secrets.USERNAME }}/board_api

          docker build -t ${{ secrets.USERNAME }}/stadium_api ./backend/stadium_api
          docker push ${{ secrets.USERNAME }}/stadium_api

          docker build -t ${{ secrets.USERNAME }}/weather_api ./backend/weather_api
          docker push ${{ secrets.USERNAME }}/weather_api
        
  deploy:
    # build 가 끝나야 실행하도록 설정
    needs: build
    name: 서버에 배포 단계
    runs-on: self-hosted
    steps:
    
    # 깃 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3

    # 실행 전에 디렉토리 보장, 현재 GitHub Actions 사용자(ubuntu 등)에게 권한 부여
    - name: Ensure db_data volume directory exists
      run: |
        sudo mkdir -p /home/ubuntu/db_data
        sudo chown -R 999:999 /home/ubuntu/db_data
      
    #  도커 허브 로그 
    - name: 운영서버에서 docker hub 로그인
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        
    - name: docker-compose에서 이미지 다운로드 및 실행
    # | 를 추가하면 여러개의 명령어를 추가할 수 있다.
    # 넘어오는 디렉토리를 기준으로 docker-compose 실행
      run:  |
        cd ${{ github.workspace }}
        docker compose down
        docker compose pull
        docker compose up -d
        
    # AWS에서 불필요한 공간 삭제
    - name: Docker Cleanup
      run: |
        docker image prune -f # 사용하지 않는 이미지 전체 삭제
        docker builder prune -a -f   # BuildKit 캐시 삭제
    
    
