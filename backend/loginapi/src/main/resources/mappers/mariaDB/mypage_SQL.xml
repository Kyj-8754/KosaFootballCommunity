<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "mybatis-3-mapper.dtd">
<mapper namespace="com.msa.do_login.myPage.dao.MyPageDAO">
	<!-- 회원 번호로 회원 정보 불러오기 -->
	<select id="getUserVO" parameterType="int" resultType="com.msa.do_login.user.vo.UserVO">
		SELECT * 
		FROM user
		WHERE user_no = #{userNo}
		AND user_exit_status='N'
	</select>
	
	<!-- 회원 번호로 회원 계정 불러오기 -->
	<select id="getLocalAccount" parameterType="int" resultType="com.msa.do_login.user.vo.LocalAccount">
		SELECT * 
		FROM local_account
		WHERE user_no = #{userNo}
		AND user_exit_status='N'
	</select>
	
	<!-- 스타일 코드로 스타일 명칭 불러오기 -->
	<select id="getUserStyle" parameterType="int" resultType="com.msa.do_login.user.vo.UserStyle">
		SELECT * 
		FROM user_style
		WHERE style_code = #{styleCode}
	</select>
	
	<!-- 능력치 코드로 능력치 명칭 불러오기 -->
	<select id="getUserStat" parameterType="int" resultType="com.msa.do_login.user.vo.UserStat">
		SELECT * 
		FROM user_stat
		WHERE stat_code = #{statCode}
	</select>
	
	<!-- 회원 번호로 소셜 계정 불러오기 -->
	<select id="getSocialAccount" parameterType="int" resultType="com.msa.do_security.security.vo.SocialAccountVO">
		SELECT * 
		FROM social_account
		WHERE user_no = #{userNo}
	</select>
	
	<!-- 회원 정보 수정 로직 -->
	<update id="update">
	UPDATE user
	SET user_name = #{userName},
		user_birth = #{userBirth},
		user_post_code = #{userPostCode},
		user_addr = #{userAddr},
		user_detail_addr = #{userDetailAddr},
		user_gender = #{userGender}
	WHERE user_no = #{userNo}
	</update>
	
	<!-- 프로필 정보 수정 로직 -->
	<update id="updateProfile">
	UPDATE user
	SET user_name = #{userName},
		user_comment = #{userComment},
		style_code = #{styleCode},
		stat_code = #{statCode}
	WHERE user_no = #{userNo}
	AND user_exit_status='N'
	</update>
	
	<!-- 회원 정보 수정 이력 남기기 위한 로직 -->
	<insert id="history">
		INSERT INTO user_mod_history (
			user_no, mod_user_name, mod_user_birth, mod_user_phone, mod_user_post_code,
			mod_user_addr, mod_user_detail_addr, mod_ori_pic_name, mod_new_pic_name, mod_date,
			mod_user_exit_status, mod_user_exit_date, mod_user_fail_status, mod_user_fail_cnt,
			mod_auth_code, mod_user_code, mod_user_gender, mod_user_comment, mod_stat_code, mod_style_code
		) 
		VALUES (
			#{userNo}, #{userName}, #{userBirth}, #{userPhone}, #{userPostCode},
			#{userAddr}, #{userDetailAddr}, #{oriPicName}, #{newPicName}, NOW(),
			#{userExitStatus}, #{userExitDate}, #{userFailStatus}, #{userFailCnt},
			#{authCode}, #{userCode}, #{userGender}, #{userComment}, #{styleCode}, #{statCode}
		)
	</insert>
	
	<!-- 회원 코드로 회원 정보 검색하기 -->
	<select id="searchFriendByKeyword" parameterType="String" resultType="com.msa.do_login.user.vo.UserVO">
		SELECT * 
		FROM user
		WHERE user_code = #{keyword}
		AND user_exit_status='N'
	</select>
	
	<!-- 친구 신청 처리 로직 -->
	<insert id="insertFriendRequest">
	    INSERT INTO user_relation (
	        from_user_no,
	        to_user_no
	    )
	    VALUES (
	        #{requesterNo},
	        #{requestedNo}
	    )
	</insert>
	
	<!-- 사용자의 친구 요청 대기중인 목록 추출 로직 -->
	<select id="getPendingRequests" parameterType="int" resultType="com.msa.do_login.user.vo.UserVO">
		SELECT u.* 
		FROM user_relation r
		JOIN user u ON r.from_user_no = u.user_no
		WHERE to_user_no = #{userNo}
		AND r.relation_status = 'WAIT'
		AND u.user_exit_status = 'N'
	</select>
	
	<!-- 친구 수락 요청 처리 로직 -->
	<update id="updateRelationStatusToAccept">
		UPDATE user_relation
		SET relation_status = 'ACCEPTED'
		WHERE from_user_no = #{requesterNo}
		AND to_user_no = #{requestedNo}
		AND relation_status = 'WAIT'
	</update>
	
	<!-- 친구 거절 요청 처리 로직 -->
	<delete id="deleteRelationRequest">
	    DELETE FROM user_relation
	    WHERE from_user_no = #{requesterNo}
	    AND to_user_no = #{requestedNo}
	    AND relation_status = 'WAIT'
	</delete>
	
	<!-- 친구 목록 가져오기 -->
	<select id="getFriendList" parameterType="int" resultType="com.msa.do_login.user.vo.UserVO">
		SELECT u.*
		FROM user_relation r
		JOIN user u
			ON (
				(r.from_user_no = #{userNo} AND u.user_no = r.to_user_no)
				OR
				(r.to_user_no = #{userNo} AND u.user_no = r.from_user_no)
			)
		WHERE r.relation_status = 'ACCEPTED'
		  AND u.user_exit_status = 'N'
	</select>
	
	<!-- 스타일 이름 가져오기 -->
	<select id="getStyleName" parameterType="int" resultType="com.msa.do_login.user.vo.UserStyle">
	    SELECT *
	    FROM user_style
	    WHERE style_code = #{styleCode}
	</select>
	
	<!-- 스탯 이름 가져오기 -->
	<select id="getStatName" parameterType="int" resultType="com.msa.do_login.user.vo.UserStat">
	    SELECT * 
	    FROM user_stat
	    WHERE stat_code = #{statCode}
	</select>
	
	<!-- 현재 로그인된 사용자와 해당 사용자와의 친구 관계 확인 로직 -->
	<select id="getRelationStatus" resultType="String">
		SELECT relation_status
		FROM user_relation
		WHERE (from_user_no = #{targetUserNo} AND to_user_no = #{loginUserNo})
        OR (from_user_no = #{loginUserNo} AND to_user_no = #{targetUserNo})
	</select>
	
	
	<!-- user no 로  user name 찾기 -->
	<select id="findUserNameByUserNo" parameterType="int" resultType="String">
    SELECT user_name FROM user WHERE user_no = #{user_no}
	</select>

	<!-- 현재 로그인된 사용자의 클럽 목록 조회 -->
	<select id="getClubList" parameterType="int" resultType="com.msa.do_login.myPage.dto.MyClubInfoDTO">
		SELECT tc.team_code, tc.club_name
		FROM tbl_club tc
		JOIN tbl_club_member tcm ON tc.club_id = tcm.club_id
		WHERE tcm.user_no = #{userNo}
		AND tcm.left_at IS NULL;
	</select>
	
	<select id="getMannerScore" parameterType="int" resultType="Double">
		SELECT AVG(CAST(log_memo AS UNSIGNED))
		FROM match_log
		WHERE user_no = #{userNo}
		AND log_type = '매너 점수'
	</select>
	
	<select id="getlevel" parameterType="int" resultType="Double">
		SELECT AVG(CAST(log_memo AS UNSIGNED))
		FROM match_log
		WHERE user_no = #{userNo}
		AND log_type = '실력 점수'
	</select>
	
</mapper>